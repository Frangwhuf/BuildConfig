//
// Global.msvc.bld
//
// This file is read in before any of the individual Sources.bld files
// are read.  It defines a few global variables to assist
// Template.msvc.bld.

#define REQUIRED_OCONFIG_VERSION 1.7

#if $[< $[OCONFIG_VERSION],$[REQUIRED_OCONFIG_VERSION]]
  #error You need at least oconfig version $[REQUIRED_OCONFIG_VERSION] to use BUILD_TYPE msvc.
#endif

#defun get_metalibs target,complete_libs
  // In Windows, we need to know the complete set of metalibs that
  // encapsulates each of the libraries we'd be linking with normally.
  // In the case where a particular library is not part of a metalib,
  // we include the library itself.
  #define actual_libs
  #foreach lib $[complete_libs]
    // Only consider libraries that we're actually building.
    #if $[all_libs $[and $[build_directory],$[build_target]],$[lib]]
      #set actual_libs $[actual_libs] $[lib]
    #endif
  #end lib
  #set actual_libs $[unique $[actual_libs]] $[patsubst %:m,%,$[filter %:m,$[OTHER_LIBS]]]
  $[actual_libs]
#end get_metalibs

#defun decygwin frompat,topat,path
  #foreach file $[path]
    $[patsubstw $[frompat],$[topat],$[osfilename $[file]]]
  #end file
#end decygwin

#defun make_path_absolute_if_needed path,directory
  $[if $[isfullpath $[path]],$[path],$[directory]/$[path]]
#end make_path_absolute_if_needed

#define install_lib_dir $[decygwin %,%,$[install_lib_dir]]
#define install_bin_dir $[decygwin %,%,$[install_bin_dir]]
#define install_headers_dir $[decygwin %,%,$[install_headers_dir]]
#define install_data_dir $[decygwin %,%,$[install_data_dir]]

// Define this if we want to make .sbr files.
#if $[USE_BROWSEINFO]
  #defer BROWSEINFO_FLAG /Fr"$[osfilename $[target:%.obj=%.sbr]]"
#else
  #define BROWSEINFO_FLAG
#endif

#define CFLAGS_SHARED

// Define LINK_ALL_STATIC to generate static libs instead of DLLs.
#if $[ne $[LINK_ALL_STATIC],]
  #define dlink_all_static LINK_ALL_STATIC
  #define build_dlls
  #define build_libs yes
  #define dlllib lib
#else
  #define dlink_all_static
  #define build_dlls yes
  #define build_libs
  #define dlllib dll
#endif

#sinclude $[BUILD_SCRIPTS]/compilerSettings.bld
#sinclude $[BUILD_SCRIPTS]/compilerSettings.$[BUILD_TYPE].bld

#if $[TEST_INLINING]
  // /W4 will make MSVC spit out if it inlined a fn or not, but also
  // cause a lot of other spam warnings
  #define WARNING_LEVEL_FLAG /W4
  #define EXTRA_CDEFS FORCE_INLINING $[EXTRA_CDEFS]
#endif

#if $[BUILD_TESTS]
  #define EXTRA_CDEFS TOOLS_UNIT_TEST $[EXTRA_CDEFS]
#endif

// TODO: check on the below settings and how they map into our world view
// do NOT try to do #defer CDEFINES_OPT_DEBUG $[CDEFINES_OPT_DEBUG] here!
// It won't let Sources.bld define their own CDEFINES_OPT_DEBUG!
// They must use EXTRA_CDEFS!
#defer CDEFINES_OPT_DEBUG $[if $[NO_DEBUG_CDEF],,_DEBUG] $[dlink_all_static] $[EXTRA_CDEFS]
#defer CDEFINES_OPT_QA $[dlink_all_static] $[EXTRA_CDEFS]
#defer CDEFINES_OPT_RELEASE NDEBUG $[dlink_all_static] $[EXTRA_CDEFS]

// Opt_Debug /GZ disables OPT flags, so make sure it's OPT_DEBUG only
#defer CFLAGS_OPT_DEBUG $[CDEFINES_OPT_DEBUG:%=/D%] $[COMMONFLAGS] $[DEBUGFLAGS] $[OPT_DEBUG_FLAGS]
#defer CFLAGS_OPT_QA $[CDEFINES_OPT_QA:%=/D%] $[COMMONFLAGS] $[RELEASEFLAGS] $[OPTFLAGS] $[OPT_QA_FLAGS] $[DEBUGPDBFLAGS]
#defer CFLAGS_OPT_RELEASE $[CDEFINES_OPT_RELEASE:%=/D%] $[COMMONFLAGS] $[RELEASEFLAGS] $[OPTFLAGS] \
                          $[OPT_RELEASE_FLAGS] $[DEBUGPDBFLAGS]

// NODEFAULTLIB ensures static libs linked in will connect to the correct
// msvcrt, so no debug/release mixing occurs
#defer LDFLAGS_OPT_DEBUG $[LINKER_FLAGS] $[LDFLAGS_OPT_DEBUG] 
#defer LDFLAGS_OPT_QA $[LINKER_FLAGS] $[LDFLAGS_OPT_QA] 
#defer LDFLAGS_OPT_RELEASE $[LINKER_FLAGS] $[LDFLAGS_OPT_RELEASE] 

// note: does NOT include .dll or .lib at end
#defun get_dllname dll_basename
  // right now there is no name remapping needed
  $[dll_basename]
#end get_dllname

// Because Visual Studio .NET prefers to generate object files using the same
// base name as the source file, we don't want an object file prefix.
#define obj_prefix

// TODO: check the HAVE_DINKUM flag for what it means
// Additional global defines for building under Microsoft Visual Studio .NET.
#defer EXTRA_DEFINES_GENERAL WINDOWS_PLATFORM WIN32_VC WIN32 \
                             $[if $[eq $[MFC_APP],1],,WIN32_LEAN_AND_MEAN] \
                             _STLP_USE_DYNAMIC_LIB _WINDOWS USE_DLLS \
                             USE_MALLOC_DLL $[EXTRA_CDEFS]
//                             USE_MALLOC_DLL _WIN32_WINNT=0x0500 $[EXTRA_CDEFS]
#defer EXTRA_DEFINES_DEBUG $[EXTRA_DEFINES_GENERAL] TOOLS_DEBUG _ITERATOR_DEBUG_LEVEL=2 _HAS_ITERATOR_DEBUGGING=1
#defer EXTRA_DEFINES_QA $[EXTRA_DEFINES_GENERAL] INLINE_FUNCTIONS NDEBUG NPROF TOOLS_QA
#defer EXTRA_DEFINES_RELEASE $[EXTRA_DEFINES_GENERAL] TOOLS_RELEASE INLINE_FUNCTIONS NDEBUG NPROF

// Additional compiler flags.
#defer extra_cflags /EHsc /Zm300 $[WARNING_LEVEL_FLAG] $[END_CFLAGS]

#defer DECYGWINED_INC_PATHLIST_ARGS $[decygwin %,/I"%",$[EXTRA_INCPATH] $[ipath]]
#defer MAIN_C_COMPILE_ARGS /nologo /c $[DECYGWINED_INC_PATHLIST_ARGS] $[flags] $[extra_cflags] "$[osfilename $[source]]"

#defer COMPILE_C $[COMPILER] /Fo"$[osfilename $[target]]" $[MAIN_C_COMPILE_ARGS]
#defer COMPILE_C++ $[COMPILE_C]

#defer STATIC_LIB_C $[LIBBER] /nologo $[sources] /OUT:"$[osfilename $[target]]"
#defer STATIC_LIB_C++ $[STATIC_LIB_C]

#defer COMPILE_IDL midl /nologo /env win32 /Oicf $[DECYGWINED_INC_PATHLIST_ARGS]
#defer COMPILE_RC rc /R /D "NDEBUG" /L 0x409 $[DECYGWINED_INC_PATHLIST_ARGS]

// we might want to specify base addresses for our DLLs
#if $[ne $[USE_DLLBASE],]
  // use predefined bases to speed dl loading and simplify debugging
  #defer DLLNAMEBASE $[get_dllname $[TARGET]]
  #defer DLLBASEADDRFILENAME dllbase.txt
  #defer DLLBASEARG "/BASE:@$[$[DEPOT]_ver_dir]\$[DLLBASEADDRFILENAME],$[DLLNAMEBASE]"
#else
  // requires envvar?
  #define GENERATE_BUILDDATE
#endif

#defer LINKER_DEF_FILE_ARG $[if $[LINKER_DEF_FILE],/DEF:"$[LINKER_DEF_FILE]",]

#defer SHARED_LIB_C $[LINKER] /nologo /DLL $[LINKER_DEF_FILE_ARG] $[LDFLAGS_OPT_$[upcase $[OPTIMIZE]]] \
                              $[DLLBASEARG] /OUT:"$[osfilename $[target]]" $[sources] \
                              $[decygwin %,/LIBPATH:"%",$[lpath] $[EXTRA_LIBPATH]] \
                              $[patsubst %.lib,%.lib,%,lib%.lib,$[libs]]
#defer SHARED_LIB_C++ $[SHARED_LIB_C]

#defer LINK_BIN_C $[LINKER] /nologo $[LDFLAGS_OPT_$[upcase $[OPTIMIZE]]] $[sources] \
                            $[decygwin %,/LIBPATH:"%",$[lpath] $[EXTRA_LIBPATH]] \
                            $[patsubst %.lib,%.lib,%,lib%.lib,$[libs]] /OUT:"$[osfilename $[target]]"
#defer LINK_BIN_C++ $[LINK_BIN_C]

#if $[ne $[LINK_ALL_STATIC],]
  #defer SHARED_LIB_C $[STATIC_LIB_C]
  #defer SHARED_LIB_C++ $[STATIC_LIB_C++]
  #defer ODIR_SHARED $[ODIR_STATIC]
#endif

//
// Emit high-level project configuration
//
#defsub emit_project_highlevel opt_levels,is_bin,is_dynlib,use_mfc,use_atl
$[TAB]<PropertyGroup Label="Configuration">
  #if $[ne $[is_bin],]
$[TAB]$[TAB]<ConfigurationType>Application</ConfigurationType>
  #elif $[ne $[is_dynlib],]
$[TAB]$[TAB]<ConfigurationType>DynamicLibrary</ConfigurationType>
  #else
$[TAB]$[TAB]<ConfigurationType>StaticLibrary</ConfigurationType>
  #endif  // is_dynlib
$[TAB]$[TAB]<UseOfMfc>$[if $[eq $[use_mfc],],false,true]</UseOfMfc>
$[TAB]$[TAB]<UseOfAtl>$[if $[eq $[use_atl],],false,true]</UseOfAtl>
$[TAB]$[TAB]<CharacterSet>Unicode</CharacterSet>
$[TAB]$[TAB]<WholeProgramOptimization>false</WholeProgramOptimization>
$[TAB]$[TAB]<WholeProgramOptimization Condition="'$(Configuration)'=='release'">true</WholeProgramOptimization>
$[TAB]$[TAB]<EmbedManifest>false</EmbedManifest>
$[TAB]$[TAB]<LinkIncremental>true</LinkIncremental>
$[TAB]$[TAB]<LinkIncremental Condition="'$(Configuration)'=='release'">false</LinkIncremental>
$[TAB]$[TAB]<PlatformToolset>v140</PlatformToolset>
$[TAB]</PropertyGroup>
#end emit_project_highlevel

//
// Emit project outdirs
//
#defsub emit_project_outdirs opt_levels,path,tgt,bin
$[TAB]<PropertyGroup>
$[TAB]$[TAB]<_ProjectFileVersion>10.0.30319.1</_ProjectFileVersion>
$[TAB]$[TAB]<OutDir>$[osfilename $[TOPDIR]]\$[if $[bin],bin,lib]\</OutDir>
$[TAB]$[TAB]<IntDir>$[osfilename $[path]]\$(Configuration)\</IntDir>
$[TAB]$[TAB]<TargetSuffix></TargetSuffix>
$[TAB]$[TAB]<TargetSuffix Condition="'$(Configuration)'=='debug'">D</TargetSuffix>
$[TAB]$[TAB]<TargetSuffix Condition="'$(Configuration)'=='qa'">Q</TargetSuffix>
$[TAB]$[TAB]<TargetName>$[tgt]$(TargetSuffix)</TargetName>
//  #foreach opt $[opt_levels]
//$[TAB]$[TAB]<OutDir Condition="'$(Configuration)|$(Platform)'=='$[opt]|Win32'">$[osfilename $[TOPDIR]\$[if $[bin],bin,lib]\</OutDir>
//$[TAB]$[TAB]<IntDir Condition="'$(Configuration)|$(Platform)'=='$[opt]|Win32'">$[osfilename $[path]]\$[opt]\<</IntDir>
//  #end opt
//  #foreach opt $[opt_levels]
//$[TAB]$[TAB]<OutDir Condition="'$(Configuration)|$(Platform)'=='$[opt]|x64'">$[osfilename $[TOPDIR]\$[if $[bin],bin,lib]\</OutDir>
//$[TAB]$[TAB]<IntDir Condition="'$(Configuration)|$(Platform)'=='$[opt]|x64'">$[osfilename $[path]]\$[opt]\<</IntDir>
//  #end opt
$[TAB]</PropertyGroup>
#end emit_project_outdirs

//
// Emit tools config
//
#defsub emit_project_tools_config opt_levels,scp,bld,ipth,ibin,lpth,lbs
$[TAB]<ItemDefinitionGroup>
$[TAB]$[TAB]<ClCompile>
  // TODO: handle precompiled header support
$[TAB]$[TAB]$[TAB]<PrecompiledHeader>NotUsing</PrecompiledHeader>
$[TAB]$[TAB]$[TAB]<MinimalRebuild>false</MinimalRebuild>
$[TAB]$[TAB]$[TAB]<WarningLevel>EnableAllWarnings</WarningLevel>
$[TAB]$[TAB]$[TAB]<EnableEnhancedInstructionSet>StreamingSIMDExtensions2</EnableEnhancedInstructionSet>
$[TAB]$[TAB]$[TAB]<IntrinsicFunctions>true</IntrinsicFunctions>
$[TAB]$[TAB]$[TAB]<RuntimeTypeInfo>false</RuntimeTypeInfo>
$[TAB]$[TAB]$[TAB]<OpenMPSupport>false</OpenMPSupport>
$[TAB]$[TAB]$[TAB]<DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
$[TAB]$[TAB]$[TAB]<MultiProcessorCompilation>true</MultiProcessorCompilation>
  #foreach opt $[opt_levels]
    // evaluate this in the scope of the correct project
    #define defines $[join ;,$[EXTRA_DEFINES_$[upcase $[opt]]($[scp])] $[EXTRA_DEFINES($[scp])] $[bld]]
    $[TAB]$[TAB]$[TAB]<PreprocessorDefinitions Condition="'$(Configuration)'=='$[opt]'">%(PreprocessorDefinitions);_SCL_SECURE_NO_WARNINGS;_HAS_ITERATOR_DEBUGGING=0;$[defines]</PreprocessorDefinitions>
  #end opt
$[TAB]$[TAB]$[TAB]<RuntimeLibrary>MultiThreadedDLL</RuntimeLibrary>
$[TAB]$[TAB]$[TAB]<RuntimeLibrary Condition="'$(Configuration)'=='debug'">MultiThreadedDebugDLL</RuntimeLibrary>
$[TAB]$[TAB]$[TAB]<AdditionalIncludeDirectories>$[ipth]</AdditionalIncludeDirectories>
$[TAB]$[TAB]$[TAB]<DisableSpecificWarnings>4018;4127;4146;4200;4201;4244;4251;4265;4355;4480;4505;4512;4514;4521;4522;4574;4625;4626;4640;4668;4710;4800;4820;4986;%(DisableSpecificWarnings)</DisableSpecificWarnings>
$[TAB]$[TAB]$[TAB]<FunctionLevelLinking>true</FunctionLevelLinking>
$[TAB]$[TAB]$[TAB]<Optimization Condition="'$(Configuration)'=='debug'">Disabled</Optimization>
$[TAB]$[TAB]$[TAB]<StringPooling Condition="'$(Configuration)'=='debug'">false</StringPooling>
$[TAB]$[TAB]$[TAB]<InlineFunctionExpansion Condition="'$(Configuration)'=='debug'">OnlyExplicitInline</InlineFunctionExpansion>
$[TAB]$[TAB]$[TAB]<SmallerTypeCheck Condition="'$(Configuration)'=='debug'">true</SmallerTypeCheck>
$[TAB]$[TAB]$[TAB]<BasicRuntimeChecks Condition="'$(Configuration)'=='debug'">EnableFastChecks</BasicRuntimeChecks>
$[TAB]$[TAB]$[TAB]<BufferSecurityCheck Condition="'$(Configuration)'=='qa'">false</BufferSecurityCheck>
$[TAB]$[TAB]$[TAB]<Optimization Condition="'$(Configuration)'=='qa'">Disabled</Optimization>
$[TAB]$[TAB]$[TAB]<StringPooling Condition="'$(Configuration)'=='qa'">true</StringPooling>
$[TAB]$[TAB]$[TAB]<InlineFunctionExpansion Condition="'$(Configuration)'=='qa'">OnlyExplicitInline</InlineFunctionExpansion>
//$[TAB]$[TAB]$[TAB]<DisableSpecificWarning Condition="'$(Configuration)'=='qa'"s>%(DisableSpecificWarnings);4702</DisableSpecificWarnings>
$[TAB]$[TAB]$[TAB]<StringPooling Condition="'$(Configuration)'=='release'">true</StringPooling>
$[TAB]$[TAB]$[TAB]<Optimization Condition="'$(Configuration)'=='release'">Full</Optimization>
$[TAB]$[TAB]$[TAB]<InlineFunctionExpansion Condition="'$(Configuration)'=='release'">AnySuitable</InlineFunctionExpansion>
$[TAB]$[TAB]$[TAB]<FavorSizeOrSpeed Condition="'$(Configuration)'=='release'">Size</FavorSizeOrSpeed>
$[TAB]$[TAB]$[TAB]<OmitFramePointers Condition="'$(Configuration)'=='release'">true</OmitFramePointers>
$[TAB]$[TAB]$[TAB]<WholeProgramOptimization Condition="'$(Configuration)'=='release'">true</WholeProgramOptimization>
$[TAB]$[TAB]$[TAB]<BufferSecurityCheck Condition="'$(Configuration)'=='release'">false</BufferSecurityCheck>
$[TAB]$[TAB]$[TAB]<CallingConvention Condition="'$(Configuration)'=='release'">FastCall</CallingConvention>
$[TAB]$[TAB]$[TAB]<AssemblerOutput Condition="'$(Configuration)'=='release'">AssemblyAndSourceCode</AssemblerOutput>
$[TAB]$[TAB]$[TAB]<DisableSpecificWarnings Condition="'$(Configuration)'=='release'">%(DisableSpecificWarnings);4702;4711</DisableSpecificWarnings>
$[TAB]$[TAB]$[TAB]<AdditionalOptions Condition="'$(Configuration)'=='release'">/favor:INTEL64</AdditionalOptions>
$[TAB]$[TAB]</ClCompile>
$[TAB]$[TAB]<Link>
$[TAB]$[TAB]$[TAB]<TargetMachine Condition="'$(Platform)'=='x64'">MachineX64</TargetMachine>
$[TAB]$[TAB]$[TAB]<GenerateDebugInformation>true</GenerateDebugInformation>
  #if $[eq $[ibin],]
$[TAB]$[TAB]$[TAB]<ImportLibrary>$[osfilename $[TOPDIR]/lib]\$(TargetName).lib</ImportLibrary>
  #endif // ! ibin
$[TAB]$[TAB]$[TAB]<ProgramDatabaseFile>$(SolutionDir)lib\$(TargetName).pdb</ProgramDatabaseFile>
$[TAB]$[TAB]$[TAB]<GenerateManifest>false</GenerateManifest>
$[TAB]$[TAB]$[TAB]<AdditionalLibraryDirectories>$[lpth]</AdditionalLibraryDirectories>
$[TAB]$[TAB]$[TAB]<AdditionalDependencies Condition="'$(Configuration)'=='debug'">$[join ;,$[WIN_SYS_LIBS] $[patsubst %.lib,%D.lib,$[lbs]]]</AdditionalDependencies>
$[TAB]$[TAB]$[TAB]<AdditionalDependencies Condition="'$(Configuration)'=='qa'">$[join ;,$[WIN_SYS_LIBS] $[patsubst %.lib,%Q.lib,$[lbs]]]</AdditionalDependencies>
$[TAB]$[TAB]$[TAB]<AdditionalDependencies Condition="'$(Configuration)'=='release'">$[join ;,$[WIN_SYS_LIBS] $[lbs]]</AdditionalDependencies>
  #if $[ne $[ibin],]
$[TAB]$[TAB]$[TAB]<SubSystem>Console</SubSystem>
  #else
$[TAB]$[TAB]$[TAB]<SubSystem>Windows</SubSystem>
  #endif // ! ibin
$[TAB]$[TAB]$[TAB]<EnableCOMDATFolding Condition="'$(Configuration)'=='release'">true</EnableCOMDATFolding>
$[TAB]$[TAB]$[TAB]<LinkTimeCodeGeneration Condition="'$(Configuration)'=='release'">UseLinkTimeCodeGeneration</LinkTimeCodeGeneration>
$[TAB]$[TAB]$[TAB]<OptimizeReferences Condition="'$(Configuration)'=='release'">true</OptimizeReferences>
$[TAB]$[TAB]</Link>
$[TAB]</ItemDefinitionGroup>
#end emit_project_tools_config

//
// Emit public headers info
//
#defsub emit_project_public_inc pth,incs
  #foreach hdr $[incs]
$[TAB]$[TAB]<InstallDepot Include="$[osfilename $[pth]/$[hdr]]">
$[TAB]$[TAB]$[TAB]<InstallTarget>$[osfilename $[TOPDIR]/inc/$[hdr]]</InstallTarget>
$[TAB]$[TAB]</InstallDepot>
  #end hdr
#end emit_project_public_inc

//
// emit local includes
//
#defsub emit_project_local_inc pth,incs
  #foreach hdr $[incs]
$[TAB]$[TAB]<ClInclude Include="$[osfilename $[pth]/$[hdr]]"/>
  #end hdr
#end emit_project_local_inc

//
// emit compileable objects
//
#defsub emit_project_compilable pth,comps
  #foreach comp $[comps]
$[TAB]$[TAB]<ClCompile Include="$[osfilename $[pth]/$[comp]]"/>
  #end comp
#end emit_project_compilable

//
// emit platofrm objects
//
#defsub emit_project_platforms pth,platfiles
  #foreach plat $[filter-out win32,$[downcase $[KNOWN_PLATFORMS]]]
    #foreach fle $[filter $[plat]/%,$[platfiles]]
$[TAB]$[TAB]<None Include="$[osfilename $[pth]/$[fle]]"/>
	#end fle
  #end plat
  #foreach fle $[filter win32/%.h,$[platfiles]]
$[TAB]$[TAB]<ClInclude Include="$[osfilename $[pth]/$[fle]]"/>
  #end fle
  #foreach fle $[filter win32/%,$[filter-out %.h,$[platfiles]]]
$[TAB]$[TAB]<ClCompile Include="$[osfilename $[pth]/$[fle]]">
$[TAB]$[TAB]$[TAB]<ObjectFileName>$(IntDir)win32\</ObjectFileName>
$[TAB]$[TAB]</ClCompile>
  #end fle
#end emit_project_platforms

//
// emit build files
//
#defsub emit_project_builds pth,bldfiles
  #foreach fle $[bldfiles]
$[TAB]$[TAB]<None Include="$[osfilename $[pth]/$[fle]]"/>
  #end fle
#end emit_project_builds

//
// emit misc files
//
#defsub emit_project_miscs pth,miscfiles
  #foreach fle $[miscfiles]
$[TAB]$[TAB]<None Include="$[osfilename $[pth]/$[fle]]"/>
  #end fle
#end emit_project_miscs

//
// emit orphan files
//
#defsub emit_project_orphans pth,orphans
  #foreach fle $[orphans]
$[TAB]$[TAB]<None Include="$[osfilename $[pth]/$[fle]]"/>
  #end fle
#end emit_project_orphans

//
// emit refs to other projects
//
#defsub emit_project_refs refs
$[TAB]<ItemGroup>
  #foreach ref $[refs]
$[TAB]$[TAB]<ProjectReference Include="$[osfilename $[TOPDIR]/$[all_libs $[PATH]/$[TARGET].vcxproj,$[ref]]]">
$[TAB]$[TAB]$[TAB]<Project>{$[all_libs $[proj_guid],$[ref]]}</Project>
$[TAB]$[TAB]</ProjectReference>
  #end ref
$[TAB]</ItemGroup>
#end emit_project_refs

//
// emit filters for public headers
//
#defsub emit_filter_public_inc pth,publics
  #foreach fle $[publics]
$[TAB]$[TAB]<ClInclude Include="$[osfilename $[pth]/$[fle]]">
$[TAB]$[TAB]$[TAB]<Filter>$[patsubst %/,%,$[patsubst ./%,%,$[dir $[fle]]]]</Filter>
$[TAB]$[TAB]</ClInclude>
  #end fle
#end emit_filter_public_inc

//
// emit filters for platform files
//
#defsub emit_filter_platforms pth,files
  #foreach fle $[filter-out win32/%,$[files]]
$[TAB]$[TAB]<None Include="$[osfilename $[pth]/$[fle]]">
$[TAB]$[TAB]$[TAB]<Filter>$[patsubst %/,%,$[patsubst ./%,%,$[dir $[fle]]]]</Filter>
$[TAB]$[TAB]</None>
  #end fle
  #foreach fle $[filter win32/%.h,$[files]]
$[TAB]$[TAB]<ClInclude Include="$[osfilename $[pth]/$[fle]]">
$[TAB]$[TAB]$[TAB]<Filter>$[patsubst %/,%,$[patsubst ./%,%,$[dir $[fle]]]]</Filter>
$[TAB]$[TAB]</ClInclude>
  #end fle
  #foreach fle $[filter win32/%,$[filter-out %.h,$[files]]]
$[TAB]$[TAB]<ClCompile Include="$[osfilename $[pth]/$[fle]]">
$[TAB]$[TAB]$[TAB]<Filter>$[patsubst %/,%,$[patsubst ./%,%,$[dir $[fle]]]]</Filter>
$[TAB]$[TAB]</ClCompile>
  #end fle
#end emit_filter_platforms

//
// emit filters for build files
//
#defsub emit_filter_builds pth,files
  #foreach fle $[files]
$[TAB]$[TAB]<None Include="$[osfilename $[pth]/$[fle]]">
$[TAB]$[TAB]$[TAB]<Filter>$[subst /,\,$[patsubst %/,%,Build/$[patsubst ./%,%,$[dir $[fle]]]]]</Filter>
$[TAB]$[TAB]</None>
  #end fle
#end emit_filter_builds

//
// emit filters for misc files
//
#defsub emit_filter_miscs pth,files
  #foreach fle $[files]
$[TAB]$[TAB]<None Include="$[osfilename $[pth]/$[fle]]">
$[TAB]$[TAB]$[TAB]<Filter>$[subst /,\,$[patsubst %/,%,Misc/$[patsubst ./%,%,$[dir $[fle]]]]]</Filter>
$[TAB]$[TAB]</None>
  #end fle
#end emit_filter_miscs

//
// emit filters for orphan files
//
#defsub emit_filter_orphans pth,files
  #foreach fle $[files]
$[TAB]$[TAB]<None Include="$[osfilename $[pth]/$[fle]]">
$[TAB]$[TAB]$[TAB]<Filter>$[subst /,\,$[patsubst %/,%,Orphans/$[patsubst ./%,%,$[dir $[fle]]]]]</Filter>
$[TAB]$[TAB]</None>
  #end fle
#end emit_filter_orphans

//
// emit filters for local include files
//
#defsub emit_filter_includes pth,files
  #foreach fle $[files]
$[TAB]$[TAB]<ClInclude Include="$[osfilename $[pth]/$[fle]]" />
  #end fle
#end emit_filter_includes

//
// emit filters for local compilable files
//
#defsub emit_filter_compiles pth,files
  #foreach fle $[files]
$[TAB]$[TAB]<ClCompile Include="$[osfilename $[pth]/$[fle]]" />
  #end fle
#end emit_filter_compiles

//
// emit filter folders
//
#defun get_dir_set dirname
  #define foo $[split /,$[dirname]]
  #define bar $[patsubst %/$[word $[words $[foo]],$[foo]],%,$[dirname]]
  $[dirname] $[if $[ne $[bar],$[dirname]],$[get_dir_set $[bar]]]
#end get_dir_set

#defsub emit_filter_folders pth,tgt,incs,plats,blds,miscs,orphs
  #define foo
  #foreach fle $[incs]
    #set foo $[foo] $[patsubst %/,%,$[patsubst ./%,%,$[dir $[fle]]]]
  #end fle
  #foreach fle $[plats]
    #set foo $[foo] $[patsubst %/,%,$[patsubst ./%,%,$[dir $[fle]]]]
  #end fle
  #foreach fle $[blds]
    #set foo $[foo] $[patsubst %/,%,Build/$[patsubst ./%,%,$[dir $[fle]]]]
  #end fle
  #foreach fle $[miscs]
    #set foo $[foo] $[get_dir_set $[patsubst %/,%,Misc/$[patsubst ./%,%,$[dir $[fle]]]]]
  #end fle
  #foreach fle $[orphs]
    #set foo $[foo] $[patsubst %/,%,Orphans/$[patsubst ./%,%,$[dir $[fle]]]]
  #end fle
  #set foo $[subst /,\,$[sort $[foo]]]
  #foreach fle $[foo]
$[TAB]$[TAB]<Filter Include="$[fle]">
$[TAB]$[TAB]$[TAB]<UniqueIdentifier>{$[makeguid $[pth]/$[tgt]/$[fle]]}</UniqueIdentifier>
$[TAB]$[TAB]</Filter>
  #end fle
#end emit_filter_folders

//
// Emit project headers
//
#defsub emit_project_headers headers
$[TAB]<ItemGroup>
  #foreach file $[headers[
$[TAB]$[TAB]<ClInclude Include="$[file]" />
  #end file
$[TAB]</ItemGroup>
#end emit_project_headers

//
// Emit project compile files
//
#defsub emit_project_compile_files opt_levels,src_files,platform_files,precomp_src
$[TAB]<ItemGroup>
  #foreach file $[filter win32,$[platform_files]]
$[TAB]$[TAB]<ClCompile Include="$[file]" />
  #end file
  #foreach file $[filter-out win32,$[platform_files]]
$[TAB]$[TAB]<CustomBuildStep Include="$[file]">
    #foreach opt $[opt_levels]
$[TAB]$[TAB]$[TAB]<ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='$[opt]|Win32'">true</ExcludedFromBuild>
	#end opt
    #foreach opt $[opt_levels]
$[TAB]$[TAB]$[TAB]<ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='$[opt]|x64'">true</ExcludedFromBuild>
	#end opt
$[TAB]$[TAB]</CustomBuildStep>
  #end file
  #foreach file $[filter-out $[platform_files],$[src_files]]
$[TAB]$[TAB]<ClCompile Include="$[file]" />
  #end file
  #if $[ne $[precomp_src],]
$[TAB]$[TAB]<ClCompile Include="$[precomp_src]">
    #foreach opt $[opt_levels]
$[TAB]$[TAB]$[TAB]<PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='$[opt]|Win32'">Create</PrecompiledHeader>
	#end
    #foreach opt $[opt_levels]
$[TAB]$[TAB]$[TAB]<PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='$[opt]|x64'">Create</PrecompiledHeader>
	#end
$[TAB]$[TAB]</ClCompile>
  #endif  // precomp_src
$[TAB]</ItemGroup>
#end emit_project_compile_files

//
// Emit project build files
//
#defsub emit_project_build_files opt_levels,build_files
$[TAB]<ItemGroup>
  #foreach file $[build_files]
$[TAB]$[TAB]<CustomBuildStep Include="$[file]">
$[TAB]$[TAB]$[TAB]<FileType>Document</FileType>
    #foreach opt $[opt_levels]
$[TAB]$[TAB]$[TAB]<ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='$[opt]|Win32'">true</ExcludedFromBuild>
	#end opt
    #foreach opt $[opt_levels]
$[TAB]$[TAB]$[TAB]<ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='$[opt]|x64'">true</ExcludedFromBuild>
	#end opt
$[TAB]$[TAB]</CustomBuildStep>
  #end file
$[TAB]</ItemGroup>
#end emit_project_build_files

//
// Emit project def groups
//
#defsub emit_project_def_groups opt_levels
  #foreach opt $[opt_levels]
    #call emit_project_def_group $[opt],Win32
  #end opt
  #foreach opt $[opt_levels]
    #call emit_project_def_group $[opt],x64
  #end opt
#end emit_project_def_groups

//
// Emit the standard start of a project file
//
#defsub emit_project_preamble name,guid,opt_levels
  #call emit_vcproject_preamble $[name],$[guid],$[opt_levels]
#end emit_project_preamble

//
// Emit the closing block of a project file
//
#defsub emit_project_postscript type
  #call emit_vcproject_postscript
#end emit_project_postscript

//
// Emit the standard start of a .vcproj file
//
#defsub emit_vcproject_preamble name,guid,opt_levels
<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
$[TAB]<ItemGroup Label="ProjectConfigurations">
  #foreach opt $[opt_levels]
$[TAB]$[TAB]<ProjectConfiguration Include="$[opt]|Win32">
$[TAB]$[TAB]$[TAB]<Configuration>$[opt]</Configuration>
$[TAB]$[TAB]$[TAB]<Platform>Win32</Platform>
$[TAB]$[TAB]</ProjectConfiguration>
  #end opt
  #foreach opt $[opt_levels]
$[TAB]$[TAB]<ProjectConfiguration Include="$[opt]|x64">
$[TAB]$[TAB]$[TAB]<Configuration>$[opt]</Configuration>
$[TAB]$[TAB]$[TAB]<Platform>x64</Platform>
$[TAB]$[TAB]</ProjectConfiguration>
  #end opt
$[TAB]</ItemGroup>
$[TAB]<PropertyGroup Label="Globals">
$[TAB]$[TAB]<ProjectGuid>$[guid]</ProjectGuid>
$[TAB]$[TAB]<RootNamespace>$[name]</RootNamespace>
$[TAB]$[TAB]<Keyword>Win32Proj</Keyword>
$[TAB]</PropertyGroup>
$[TAB]<Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
#end emit_vcproject_preamble

#defsub emit_project_preamble2 name,guid,opt_levels
$[TAB]<Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
$[TAB]<ImportGroup Label="ExtensionSettings">
$[TAB]</ImportGroup>
$[TAB]<ImportGroup Label="PropertySheets">
$[TAB]$[TAB]<Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
$[TAB]</ImportGroup>
$[TAB]<PropertyGroup Label="UserMacros" />
#end emit_project_preamble2

//
// Emit project-level custom build step for copying/installing files
//
#defsub emit_project_custom opt,shared,static,phead,prj
  #define sep &#x0D;&#x0A;
  #define customline
  // first shared libs
  #if $[ne $[shared],]
    #set customline robocopy $(OutDir) $(SolutionDir)bin $[shared]
  #endif // ne shared
  // next static libs
  #if $[ne $[static],]
	#if $[ne $[customline],]
	  #set customline $[customline]$[sep]
	#endif // ne customline
    #set customline $[customline]robocopy $(OutDir) $(SolutionDir)lib $[static]
  #endif // ne static
  // then public headers
  #if $[ne $[phead],]
	#if $[ne $[customline],]
	  #set customline $[customline]$[sep]
	#endif // ne customline
    #set customline $[customline]robocopy $(InputDir)$[prj] $(SolutionDir)inc\$[prj] *.h /S /PURGE
  #endif // ne phead
  // now take care of errors
  #if $[ne $[customline],]
    #set customline $[customline]$[sep]if errorlevel 15 goto VCEnd$[sep]if errorlevel 13 goto VCEnd$[sep]if errorlevel 11 goto VCEnd
    #set customline $[customline]$[sep]if errorlevel 9 goto VCEnd$[sep]if errorlevel 7 goto VCEnd$[sep]if errorlevel 5 goto VCEnd
    #set customline $[customline]$[sep]if errorlevel 3 goto VCEnd$[sep]if errorlevel 1 goto VCEnd$[sep]
  #endif // ne customline
  // next up, the 'additional' dependencies
  #define customdep
  #set sep ;
  #if $[ne $[shared],]
    #set customdep $[join ;,$[foreach i,$[shared],$(OutDir)$[i]]]
  #endif // ne shared
  #if $[ne $[static],]
    #if $[ne $[customdep],]
      #set customdep $[customdep]$[sep]
    #endif // ne customdep
    #set customdep $[customdep]$[join ;,$[foreach i,$[static],$(OutDir)$[i]]]
  #endif // ne static
  // lastly, the outputs
  #define customout
  #if $[ne $[shared],]
    #set customout $[join ;,$[foreach i,$[shared],$(SolutionDir)bin\$[i]]]
  #endif // ne shared
  #if $[ne $[static],]
    #if $[ne $[customout],]
      #set customout $[customout]$[sep]
    #endif // ne customout
    #set customout $[customout]$[join ;,$[foreach i,$[static],$(SolutionDir)lib\$[i]]]
  #endif // ne static
  #if $[ne $[phead],]
    #if $[ne $[customout],]
      #set customout $[customout]$[sep]
    #endif // ne customout
    #set customout $[customout]$[join ;,$[foreach i,$[phead],$(SolutionDir)inc\$[osfilename $[i]]]]
  #endif // ne phead
$[TAB]$[TAB]$[TAB]<Tool
$[TAB]$[TAB]$[TAB]$[TAB]Name="VCCustomBuildTool"
$[TAB]$[TAB]$[TAB]$[TAB]Description="Installing files"
$[TAB]$[TAB]$[TAB]$[TAB]CommandLine="$[customline]"
$[TAB]$[TAB]$[TAB]$[TAB]AdditionalDependencies="$[customdep]"
$[TAB]$[TAB]$[TAB]$[TAB]Outputs="$[customout]"
$[TAB]$[TAB]$[TAB]$[TAB]/>
#end emit_project_custom

//
// Emit a configuration specification preamble for a .vcproj file.
//
#defsub emit_project_configuration_preamble name,opt,is_bin,is_dynlib,have_idl,buildvar,target,bindir
$[TAB]$[TAB]<Configuration
$[TAB]$[TAB]$[TAB]Name="$[name]|Win32"
$[TAB]$[TAB]$[TAB]OutputDirectory="$[osfilename $[bindir]]"
  #if $[INTERMEDIATE_DIR]
$[TAB]$[TAB]$[TAB]IntermediateDirectory="$[osfilename $[bindir]/$[INTERMEDIATE_DIR]]"
  #else // INTERMEDIATE_DIR
$[TAB]$[TAB]$[TAB]IntermediateDirectory="$[osfilename $[bindir]]"
  #endif // INTERMEDIATE_DIR
  #if $[defined CHARACTER_SET]
$[TAB]$[TAB]$[TAB]CharacterSet="$[CHARACTER_SET]"
  #else // CHARACTER_SET
$[TAB]$[TAB]$[TAB]CharacterSet="1"
  #endif // CHARACTER_SET
  #if $[not $[is_bin]]
    #if $[have_idl]
$[TAB]$[TAB]$[TAB]UseOfATL="1"
    #else
$[TAB]$[TAB]$[TAB]UseOfATL="0"
    #endif
  #endif
$[TAB]$[TAB]$[TAB]UseOfMFC="$[if $[eq $[MFC_APP],1],2,0]"
  #if $[eq $[opt],release]
    #if $[defined NO_WHOLE_PROGRAM_OPTIMIZATION]
$[TAB]$[TAB]$[TAB]WholeProgramOptimization="0"
    #else // NO_WHOLE_PROGRAM_OPTIMIZATION
$[TAB]$[TAB]$[TAB]WholeProgramOptimization="1"
    #endif // NO_WHOLE_PROGRAM_OPTIMIZATION
  #endif
  #if $[is_bin]
$[TAB]$[TAB]$[TAB]ConfigurationType="1">
  #elif $[is_dynlib]
$[TAB]$[TAB]$[TAB]ConfigurationType="2">
  #else
$[TAB]$[TAB]$[TAB]ConfigurationType="4">
  #endif
#end emit_project_configuration_preamble

//
// Emit a configuration specification postscript for a .vcproj file.
//
#defsub emit_project_configuration_postscript
$[TAB]$[TAB]</Configuration>
#end emit_project_configuration_postscript

//
// Emit references to other projects, so that M$ Dev can figure
// out what else might need to be built.
//
#defsub emit_project_references reflibs
$[TAB]<References>
  #foreach lib $[reflibs]
    #if $[not $[or $[all_libs $[OMIT_REFERENCE],$[lib]],$[all_libs $[WINK_THIS],$[lib]]]]
$[TAB]$[TAB]<ProjectReference
$[TAB]$[TAB]$[TAB]ReferencedProjectIdentifier="$[all_libs $[proj_guid_text],$[lib]]"
$[TAB]$[TAB]$[TAB]Name="$[lib]"/>
    #endif
  #end lib
$[TAB]</References>
#end emit_project_references

//
// Emit a filter block (recursively) for files that are not
// compiled.  Use the filters to mimic the directory structure
// of the files.
//
#defsub emit_project_structure_nocomp_files files,name,opt_levels,indent,cumulative_dir
  #define ident
  #for cnt 1,$[indent],1
    #set ident $[ident]$[TAB]
  #end cnt
$[ident]<Filter
$[ident]$[TAB]Name="$[name]">
  #define local_files
  #while $[files]
    #define file $[firstword $[files]]
    #define file_split $[split /,$[file]]
    #if $[> $[words $[file_split]],1]
      #define sub_dir $[firstword $[file_split]]
      #define sub_files $[patsubst $[sub_dir]/%,%,$[filter $[sub_dir]/%,$[files]]]
      #call emit_project_structure_nocomp_files $[sub_files],\
                                                $[sub_dir],\
                                                $[opt_levels],\
                                                $[+ $[indent],1],\
                                                $[if $[cumulative_dir],$[cumulative_dir]/$[sub_dir],$[sub_dir]]
      #set files $[filter-out $[sub_dir]/%,$[files]]
    #else
      #set local_files $[local_files] $[file]
      #set files $[filter-out $[file],$[files]]
    #endif
  #end $[files]
  #foreach file $[local_files]
$[ident]$[TAB]<File
    #define out_file $[make_path_absolute_if_needed $[file],$[TOPDIR]/$[PATH]$[if $[cumulative_dir],/$[cumulative_dir]]]
    #set out_file $[osfilename $[out_file]]
$[ident]$[TAB]$[TAB]RelativePath="$[out_file]">
    #foreach opt $[opt_levels]
$[ident]$[TAB]$[TAB]<FileConfiguration
$[ident]$[TAB]$[TAB]$[TAB]Name="$[opt]|Win32"
$[ident]$[TAB]$[TAB]$[TAB]ExcludedFromBuild="true">
$[ident]$[TAB]$[TAB]$[TAB]<Tool
$[ident]$[TAB]$[TAB]$[TAB]$[TAB]Name="VCCustomBuildTool"/>
$[ident]$[TAB]$[TAB]</FileConfiguration>
    #end opt
$[ident]$[TAB]</File>
  #end file
$[ident]</Filter>
#end emit_project_structure_nocomp_files

//
// Emit a filter block (recursively) for files that are simply
// compiled.  Use the filters to mimic the directory structure
// of the files.
//
#defsub emit_project_structure_simplecomp_files files,name,opt_levels,indent,cumulative_dir
  #define ident
  #for cnt 1,$[indent],1
    #set ident $[ident]$[TAB]
  #end cnt
$[ident]<Filter
$[ident]$[TAB]Name="$[name]">
  #define local_files
  #while $[files]
    #define file $[firstword $[files]]
    #define file_split $[split /,$[file]]
    #if $[> $[words $[file_split]],1]
      #define sub_dir $[firstword $[file_split]]
      #define sub_files $[patsubst $[sub_dir]/%,%,$[filter $[sub_dir]/%,$[files]]]
      #call emit_project_structure_simplecomp_files $[sub_files],\
                                                    $[sub_dir],\
                                                    $[opt_levels],\
                                                    $[+ $[indent],1],\
                                                    $[if $[cumulative_dir],$[cumulative_dir]/$[sub_dir],$[sub_dir]]
      #set files $[filter-out $[sub_dir]/%,$[files]]
    #else
      #set local_files $[local_files] $[file]
      #set files $[filter-out $[file],$[files]]
    #endif
  #end $[files]
  #foreach file $[local_files]
$[ident]$[TAB]<File
    #define out_file $[make_path_absolute_if_needed $[file],$[TOPDIR]/$[PATH]$[if $[cumulative_dir],/$[cumulative_dir]]]
    #set out_file $[osfilename $[out_file]]
$[ident]$[TAB]$[TAB]RelativePath="$[out_file]">
    #foreach opt $[opt_levels]
$[ident]$[TAB]$[TAB]<FileConfiguration
$[ident]$[TAB]$[TAB]$[TAB]Name="$[opt]|Win32"
$[ident]$[TAB]$[TAB]$[TAB]ExcludedFromBuild="false">
$[ident]$[TAB]$[TAB]</FileConfiguration>
    #end opt
$[ident]$[TAB]</File>
  #end file
$[ident]</Filter>
#end emit_project_structure_simplecomp_files

//
// Emit a filter block for files that are not compiled
//
#defsub emit_project_nocomp_files files,name,opt_levels
  #define local_files
  #foreach file $[files]
    #if $[isfile $[file]]
      #set local_files $[local_files] $[file]
    #endif
  #end file
  #if $[local_files]
$[TAB]$[TAB]<Filter
$[TAB]$[TAB]$[TAB]Name="$[name]">
    #foreach file $[local_files]
$[TAB]$[TAB]$[TAB]<File
$[TAB]$[TAB]$[TAB]$[TAB]RelativePath="$[osfilename $[make_path_absolute_if_needed $[file],$[TOPDIR]/$[PATH]]]">
      #foreach opt $[opt_levels]
$[TAB]$[TAB]$[TAB]$[TAB]<FileConfiguration
$[TAB]$[TAB]$[TAB]$[TAB]$[TAB]Name="$[opt]|Win32"
$[TAB]$[TAB]$[TAB]$[TAB]$[TAB]ExcludedFromBuild="true">
$[TAB]$[TAB]$[TAB]$[TAB]$[TAB]<Tool
$[TAB]$[TAB]$[TAB]$[TAB]$[TAB]$[TAB]Name="VCCustomBuildTool"/>
$[TAB]$[TAB]$[TAB]$[TAB]</FileConfiguration>
      #end opt
$[TAB]$[TAB]$[TAB]</File>
    #end file
$[TAB]$[TAB]</Filter>
  #endif // $[local_files]
#end emit_project_nocomp_files

//
// Emit a recursive filter block for files that are compiled regularly.  Use the filters
// to mimic the directory structure of the files.
//
#defsub emit_project_structure_comp_files files,name,opt_levels,indent,cumulative_dir,tree
  #define ident
  #for cnt 1,$[indent],1
    #set ident $[ident]$[TAB]
  #end cnt
#if $[name]
$[ident]<Filter
$[ident]$[TAB]Name="$[name]">
#endif
  #define local_files
  #define treated_file
  #if $[tree]
    #while $[> $[length $[files]],0]
      #define file $[firstword $[files]]
      #if $[isfullpath $[file]]
        #set treated_file $[notdir $[file]]
      #else
        #set treated_file $[file]
      #endif
        
      #define file_split $[split /,$[treated_file]]
      #if $[> $[words $[file_split]],1]
        #define sub_dir $[firstword $[file_split]]
        #define sub_files $[patsubst $[sub_dir]/%,%,$[filter $[sub_dir]/%,$[files]]]
        #call emit_project_structure_comp_files $[sub_files],\
                                                  $[sub_dir],\
                                                  $[opt_levels],\
                                                  $[+ $[indent],1],\
                                                  $[if $[cumulative_dir],$[cumulative_dir]/$[sub_dir],$[sub_dir]],$[tree]
        #set files $[filter-out $[sub_dir]/%,$[files]]
      #else
        #set local_files $[local_files] $[file]
        #if $[= $[words $[files]],1]
          #set files
        #else
          #set files $[substr $[+ $[length $[file]], 2], $[length $[files]], $[files]]
        #endif
      #endif
    #end $[> $[length $[files]],0]
  #else
    #set local_files $[files]
  #endif
  #foreach file $[local_files]
$[ident]$[TAB]<File
    #define local_file $[if $[cumulative_dir],$[cumulative_dir]/]$[file]
    #define out_file $[make_path_absolute_if_needed $[file],$[TOPDIR]/$[PATH]$[if $[cumulative_dir],/$[cumulative_dir]]]
    #set out_file $[osfilename $[out_file]]
$[ident]$[TAB]$[TAB]RelativePath="$[out_file]">
    #if $[or $[findstring $[local_file],$[NOPRECOMP_SOURCES]],$[and $[precomp_filename], $[ne $[patsubst %.c,%.iscfile,$[file] ], $[file]] ] ]
      #foreach opt $[opt_levels]
  $[ident]$[TAB]$[TAB]<FileConfiguration
  $[ident]$[TAB]$[TAB]$[TAB]Name="$[opt]|Win32">
  $[ident]$[TAB]$[TAB]$[TAB]<Tool
  $[ident]$[TAB]$[TAB]$[TAB]$[TAB]Name="VCCLCompilerTool"
  $[ident]$[TAB]$[TAB]$[TAB]$[TAB]UsePrecompiledHeader="0"/>
  $[ident]$[TAB]$[TAB]</FileConfiguration>
      #end opt
    #elif $[and $[ne $[DEBUGOPT_DISABLE], 1], $[findstring $[local_file],$[DEBUGOPT_SOURCES]]]
  $[ident]$[TAB]$[TAB]<FileConfiguration
  $[ident]$[TAB]$[TAB]$[TAB]Name="debug|Win32">
  $[ident]$[TAB]$[TAB]$[TAB]<Tool
  $[ident]$[TAB]$[TAB]$[TAB]$[TAB]Name="VCCLCompilerTool"
  $[ident]$[TAB]$[TAB]$[TAB]$[TAB]Optimization="2"
  $[ident]$[TAB]$[TAB]$[TAB]$[TAB]GlobalOptimizations="true"
  $[ident]$[TAB]$[TAB]$[TAB]$[TAB]InlineFunctionExpansion="2"
  $[ident]$[TAB]$[TAB]$[TAB]$[TAB]FavorSizeOrSpeed="1"
  $[ident]$[TAB]$[TAB]$[TAB]$[TAB]OmitFramePointers="true"
  $[ident]$[TAB]$[TAB]$[TAB]$[TAB]UsePrecompiledHeader="0"/>
  $[ident]$[TAB]$[TAB]</FileConfiguration>
    #endif
$[ident]$[TAB]</File>
  #end file
#if $[name]
$[ident]</Filter>
#endif
#end emit_project_structure_comp_files

//
// Emit a filter block for files that are compiled with a custom build rule.
//
#defsub emit_project_custom_build_files files,name,rule_defun,outputs_defun,opt_levels
  #if $[files]
$[TAB]$[TAB]<Filter
$[TAB]$[TAB]$[TAB]Name="$[name]">
    #foreach file $[files]
$[TAB]$[TAB]$[TAB]<File
$[TAB]$[TAB]$[TAB]$[TAB]RelativePath="$[osfilename $[make_path_absolute_if_needed $[file],$[TOPDIR]/$[PATH]]]">
      #foreach opt $[opt_levels]
$[TAB]$[TAB]$[TAB]$[TAB]<FileConfiguration
$[TAB]$[TAB]$[TAB]$[TAB]$[TAB]Name="$[opt]|Win32">
$[TAB]$[TAB]$[TAB]$[TAB]$[TAB]<Tool
$[TAB]$[TAB]$[TAB]$[TAB]$[TAB]$[TAB]Name="VCCustomBuildTool"
$[TAB]$[TAB]$[TAB]$[TAB]$[TAB]$[TAB]Description="Running $[name] on $[file] ..."
$[TAB]$[TAB]$[TAB]$[TAB]$[TAB]$[TAB]CommandLine="$[$[rule_defun] $[file]]"
$[TAB]$[TAB]$[TAB]$[TAB]$[TAB]$[TAB]AdditionalDependencies=""
$[TAB]$[TAB]$[TAB]$[TAB]$[TAB]$[TAB]Outputs="$[$[outputs_defun] $[file]]"/>
$[TAB]$[TAB]$[TAB]$[TAB]</FileConfiguration>
      #end opt
$[TAB]$[TAB]$[TAB]</File>
    #end file
$[TAB]$[TAB]</Filter>
  #endif
#end emit_project_custom_build_files



//
// Emit a filter block for files that are platform-specific.  Only compile the ones
// for this platform.
//
#defsub emit_project_platform_files files,opt_levels
  #define local_files
  #foreach file $[files]
    #if $[isfile $[file]]
      #set local_files $[local_files] $[file]
    #endif
  #end file
  #if $[local_files]
$[TAB]$[TAB]<Filter
$[TAB]$[TAB]$[TAB]Name="Platform">
    #define known_files
    #foreach plat $[downcase $[KNOWN_PLATFORMS]]
      #define plat_files $[filter $[plat]/%,$[local_files]]
      #if $[plat_files]
        #set known_files $[known_files] $[plat_files]
$[TAB]$[TAB]$[TAB]<Filter
$[TAB]$[TAB]$[TAB]$[TAB]Name="$[plat]">
        #foreach file $[plat_files]
$[TAB]$[TAB]$[TAB]$[TAB]<File
$[TAB]$[TAB]$[TAB]$[TAB]$[TAB]RelativePath="$[osfilename $[make_path_absolute_if_needed $[file],$[TOPDIR]/$[PATH]]]">
          #if $[ne $[downcase $[PLATFORM]],$[plat]]
            #foreach opt $[opt_levels]
$[TAB]$[TAB]$[TAB]$[TAB]$[TAB]<FileConfiguration
$[TAB]$[TAB]$[TAB]$[TAB]$[TAB]$[TAB]Name="$[opt]|Win32"
$[TAB]$[TAB]$[TAB]$[TAB]$[TAB]$[TAB]ExcludedFromBuild="true">
$[TAB]$[TAB]$[TAB]$[TAB]$[TAB]$[TAB]<Tool
$[TAB]$[TAB]$[TAB]$[TAB]$[TAB]$[TAB]$[TAB]Name="VCCustomBuildTool"/>
$[TAB]$[TAB]$[TAB]$[TAB]$[TAB]</FileConfiguration>
            #end opt
          #endif
$[TAB]$[TAB]$[TAB]$[TAB]</File>
        #end file
$[TAB]$[TAB]$[TAB]</Filter>
      #endif // $[plat_files]
    #end plat
    #define leftover_files $[filter-out $[known_files],$[local_files]]
    #if $[leftover_files]
$[TAB]$[TAB]$[TAB]<Filter
$[TAB]$[TAB]$[TAB]$[TAB]Name="Unknown">
      #foreach file $[leftover_files]
$[TAB]$[TAB]$[TAB]$[TAB]<File
$[TAB]$[TAB]$[TAB]$[TAB]$[TAB]RelativePath="$[osfilename $[make_path_absolute_if_needed $[file],$[TOPDIR]/$[PATH]]]">
        #foreach opt $[opt_levels]
$[TAB]$[TAB]$[TAB]$[TAB]$[TAB]<FileConfiguration
$[TAB]$[TAB]$[TAB]$[TAB]$[TAB]$[TAB]Name="$[opt]|Win32"
$[TAB]$[TAB]$[TAB]$[TAB]$[TAB]$[TAB]ExcludeFromBuild="true">
$[TAB]$[TAB]$[TAB]$[TAB]$[TAB]$[TAB]<Tool
$[TAB]$[TAB]$[TAB]$[TAB]$[TAB]$[TAB]$[TAB]Name="VCCustomBuildTool"/>
$[TAB]$[TAB]$[TAB]$[TAB]$[TAB]</FileConfiguration>
        #end opt
$[TAB]$[TAB]$[TAB]$[TAB]</File>
      #end file
$[TAB]$[TAB]$[TAB]</Filter>
    #endif // $[leftover_files]
$[TAB]$[TAB]</Filter>
  #endif // $[local_files]
#end emit_project_platform_files

//
// Emit the section of a .vcproj that identifies the component files
//
#defsub emit_project_files regular_files,build_files,perl_files,swig_files,das_files,nasm_files,\
        cxxtest_files,tolua_files,precomp_file,misc_files,orphan_files,platform_files,idl_files,opt_lev
$[TAB]<Files>
  // First, the files related to the build system itself
  #if $[build_files]
    #call emit_project_nocomp_files $[build_files],Build,$[opt_lev]
  #endif
  // Das files come early because we want the generated sources to get
  // generated before they're needed.
  #call emit_project_custom_build_files $[das_files],Daspc,daspc_command,daspc_outputs,$[opt_lev]
  // Nasm files
  #call emit_project_custom_build_files $[nasm_files],Nasm,nasm_command,nasm_outputs,$[opt_lev]
  // Cxxtest files
  #call emit_project_custom_build_files $[cxxtest_files],Cxxtest,cxxtest_command,cxxtest_outputs,$[opt_lev]
  // tolua files
  #call emit_project_custom_build_files $[tolua_files],tolua,tolua_command,tolua_outputs,$[opt_lev]
  // swig files
  #call emit_project_custom_build_files $[swig_files],swig,swig_command,swig_outputs,$[opt_lev]
  // Then perl files
  #if $[perl_files]
    #call emit_project_structure_nocomp_files $[perl_files],Perl,$[opt_lev],2,
  #endif
  // Idl files
  #if $[idl_files]
    #call emit_project_structure_simplecomp_files $[idl_files],Idl,$[opt_lev],2,
  #endif
  // Next the misc files
  #if $[and $[not $[SKIP_MISC]], $[misc_files]]
    #call emit_project_structure_nocomp_files $[misc_files],Misc,$[opt_lev],2,
  #endif
  // How about platform-specific files
  #if $[platform_files]
    #call emit_project_platform_files $[platform_files],$[opt_lev]
  #endif
  // Then orphaned files
  #if $[and $[not $[SKIP_ORPHANS]], $[orphan_files]]
    #call emit_project_structure_nocomp_files $[orphan_files],Orphans,$[opt_lev],2,
  #endif
  // Now, do the compileable files
  #if $[regular_files]
    #define local_reg $[unique $[foreach fle,$[sort $[notdir $[regular_files]]],$[filter %$[fle],$[regular_files]]]]

    #if $[= $[OCONFIG_MSVC_TREE], 1]
      #set local_reg $[sort $[local_reg]]
    #endif
    #call emit_project_structure_comp_files $[local_reg],,$[opt_lev],2,,$[= $[OCONFIG_MSVC_TREE], 1]
  #endif // $[regular_files]
  // Next, the generated precompiled header files
  // TODO: delete this, these should be folded into sources
  #if $[precomp_file]
$[TAB]$[TAB]<File
$[TAB]$[TAB]$[TAB]RelativePath="$[osfilename $[TOPDIR]/$[PATH]/$[precomp_file]]">
$[TAB]$[TAB]</File>
$[TAB]$[TAB]<File
$[TAB]$[TAB]$[TAB]RelativePath="$[osfilename $[TOPDIR]/$[PATH]/$[precomp_file:%.h=%.cpp]]">
    #foreach opt $[opt_lev]
$[TAB]$[TAB]$[TAB]<FileConfiguration
$[TAB]$[TAB]$[TAB]$[TAB]Name="$[opt]|Win32">
$[TAB]$[TAB]$[TAB]$[TAB]<Tool
$[TAB]$[TAB]$[TAB]$[TAB]$[TAB]Name="VCCLCompilerTool"
$[TAB]$[TAB]$[TAB]$[TAB]$[TAB]UsePrecompiledHeader="1"/>
$[TAB]$[TAB]$[TAB]</FileConfiguration>
    #end opt
$[TAB]$[TAB]</File>
  #endif // $[precomp_file]
$[TAB]</Files>
#end emit_project_files

//
// Emit the closing block of a .vcproj file
//
#defsub emit_vcproject_postscript
$[TAB]<Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
$[TAB]<ImportGroup Label="ExtensionTargets">
$[TAB]</ImportGroup>
</Project>
#end emit_vcproject_postscript

//
// Generate project filename
//
#defun emit_project_filename tgt
  $[tgt].vcxproj
#end emit_project_filename

//
// Generate project filter filename
//
#defun emit_project_filter_filename tgt
  $[tgt].vcxproj.filters
#end emit_project_filter_filename

//
// Generate project user filename
//
#defun emit_project_user_filename tgt
  $[tgt].vcxproj.user
#end emit_project_user_filename
