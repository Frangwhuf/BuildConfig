//
// compilerSettings.bld
//
// This file contains settings specific to compilers on Windows.  If
// we need something like this for other BUILD_TYPEs, this should be
// refactored.

#define PERL perl
#define NASM $[osfilename $[TOOL]/nasm/nasmw.exe]
#define CXXTEST $[PERL] $[osfilename $[TOPDIR]/src/Ext/cxxtest/cxxtestgen.pl]
#define TOLUAFRONTEND $[PERL] $[osfilename $[TOPDIR]/src/Tool/Script/toLuaFrontend.pl]

#if $[eq $[USE_COMPILER],MSVC]
  #define COMPILER cl
  #define LINKER link
  #define LIBBER lib
  #define COMMONFLAGS /Gi-

  // use "unsafe" QIfist flt->int rounding only if FAST_FLT_TO_INT is defined
  #define OPTFLAGS /O2 /Ob1 /G6 $[if $[ne $[FAST_FLT_TO_INT],], /QIfist,]
  #define OPT_DEBUG_FLAGS /GZ

  // Note: Zi cannot be used on multiproc builds with precomp hdrs, Z7 must be used instead
  #defer DEBUGPDBFLAGS /Zi /Fd"$[osfilename $[patsubst %.obj,%.pdb,$[target]]]"
  #defer DEBUGFLAGS /MDd $[BROWSEINFO_FLAG] $[DEBUGINFOFLAGS] $[DEBUGPDBFLAGS]
  #define RELEASEFLAGS /MD
  #define WARNING_LEVEL_FLAG /Wall

  // NODEFAULTLIB ensures static libs linked in will connect to the correct msvcrt, so no debug/release mixing occurs
  #define LDFLAGS_OPT_DEBUG /NODEFAULTLIB:MSVCRT.LIB
  #define LDFLAGS_OPT_QA /NODEFAULTLIB:MSVCRTD.LIB /OPT:REF
  #define LDFLAGS_OPT_RELEASE /NODEFAULTLIB:MSVCRTD.LIB /OPT:REF $[LDFLAGS_OPT_RELEASE]

  #define MAPINFOFLAGS /MAPINFO:EXPORTS /MAPINFO:FIXUPS /MAPINFO:LINES

  #if $[ENABLE_PROFILING]
      // note according to docs, this should force /PDB:none /DEBUGTYPE:cv, 
      // so no pdb file is generated for debug??  (doesnt seem to be true)
    #define PROFILE_FLAG /PROFILE
  #else
    #define PROFILE_FLAG
  #endif

  // Note: all Opts will link w/debug info now
  #define LINKER_FLAGS /DEBUG /DEBUGTYPE:CV $[PROFILE_FLAG] /MAP $[MAPINFOFLAGS] /fixed:no /incremental:no /WARN:3

  #if $[or $[ne $[FORCE_INLINING],],$[eq $[OPTIMIZE],QA],$[eq $[OPTIMIZE],Release]
      #define GLOBAL_EXTRA_CDEFS FORCE_INLINING $[GLOBAL_EXTRA_CDEFS]
  #endif

  // ensure pdbs are copied to install dir
  #define build_pdbs yes

  #define STL_ALLOCATOR VC6
#elif $[or $[eq $[USE_COMPILER],MSVC7], $[eq $[USE_COMPILER],MSVC7_1]]
  #define COMPILER cl
  #define LINKER link
  #define LIBBER lib

  #if $[eq $[USE_COMPILER], MSVC7]
    // What is the syntax of the STL allocator declaration?  See
    // LocalSetup.bld for allowable values.
    #define STL_ALLOCATOR MODERN
  #else
    // until I figure out how to get rid of 'rebind' vc7.1 C4346 build errors
    #define STL_ALLOCATOR UNKNOWN
  #endif

  #if $[eq $[NO_CROSSOBJ_OPT],]
     #define DO_CROSSOBJ_OPT 1
  #endif

  #if $[DO_CROSSOBJ_OPT]
     #define OPT_RELEASE_FLAGS /GL
     #define LDFLAGS_OPT_RELEASE /LTCG
  #endif

  #define CDEFINES_OPT_DEBUG
  #define CDEFINES_OPT_QA
  #define CDEFINES_OPT_RELEASE

  // NODEFAULTLIB ensures static libs linked in will connect to the correct msvcrt, so no debug/release mixing occurs

  #define LDFLAGS_OPT_DEBUG /INCREMENTAL
  #define LDFLAGS_OPT_QA /INCREMENTAL:NO
  #define LDFLAGS_OPT_RELEASE /OPT:REF /OPT:ICF /LTCG $[LDFLAGS_OPT_RELEASE]
  
  #if $[eq $[BUILD_TYPE],gmsvc]
    #define WIN_SYS_LIBS kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib \
                         shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib
  #endif

  #define WARNING_LEVEL_FLAG /W3

  #define COMMONFLAGS /G6 /GA /GF /Oi /Zc:forScope $[WARNING_LEVEL_FLAG] /WX /nologo /c /wd4127 /wd4505 /wd4201 /vmg

  #define OPT_DEBUG_FLAGS /Od /Gm /RTCs
  #define OPT_RELEASE_FLAGS /Og /Ob2 /Os /Oy $[OPT_RELEASE_FLAGS]

  // Note: Zi cannot be used on multiproc builds with precomp hdrs, Z7 must be used instead
  #defer DEBUGPDBFLAGS /Zi

  // if LINK_FORCE_STATIC_C_RUNTIME is defined, it always links with static c runtime (release version
  // for both Debug and Release!) instead of the msvcrt dlls

  #defer DEBUGFLAGS $[if $[ne $[LINK_FORCE_STATIC_RELEASE_C_RUNTIME],],/MT,/MDd] \
                    $[BROWSEINFO_FLAG] $[DEBUGINFOFLAGS] $[DEBUGPDBFLAGS]
  #defer RELEASEFLAGS $[if $[ne $[LINK_FORCE_STATIC_RELEASE_C_RUNTIME],],/MT,/MD] /FD /Gy
  #defer EXCEPTIONFLAGS /EHsc

  #define MAPINFOFLAGS /MAP /MAPINFO:EXPORTS /MAPINFO:LINES

  #if $[ENABLE_PROFILING]
    #define PROFILE_FLAG /FIXED:NO
  #else
    #define PROFILE_FLAG
  #endif

  #if $[or $[ne $[FORCE_INLINING],],$[eq $[OPTIMIZE],QA],$[eq $[OPTIMIZE],Release]]
      #defer GLOBAL_EXTRA_CDEFS $[GLOBAL_EXTRA_CDEFS] $[if $[OPT_MINSIZE],,FORCE_INLINING]
  #endif

  // Note: all Opts will link w/debug info now
  #define LINKER_FLAGS /DEBUG $[PROFILE_FLAG]
  
  // Take a pass at options for the resource compiler
  #define RC_DEBUG_FLAGS /d "_DEBUG"
  #define RC_QA_FLAGS /d "NDEBUG"
  #define RC_RELEASE_FLAGS /d "NDEBUG"

  // ensure pdbs are copied to install dir
  #define build_pdbs yes
#elif $[eq $[USE_COMPILER],INTEL]
  #define COMPILER icl
  #define LINKER xilink
  #define LIBBER xilib
  #define COMMONFLAGS /Gi- /Qwd985 /Qvc7 /G6

  // Note: Zi cannot be used on multiproc builds with precomp hdrs, Z7 must be used instead
  #defer DEBUGPDBFLAGS /Zi /Qinline_debug_info /Fd"$[osfilename $[patsubst %.obj,%.pdb,$[target]]]"
  // Oy- needed for MS debugger
  #defer DEBUGFLAGS /Oy- /MDd $[BROWSEINFO_FLAG] $[DEBUGINFOFLAGS] $[DEBUGPDBFLAGS]
  #define RELEASEFLAGS /MD
  #define WARNING_LEVEL_FLAG /W3

  #if $[DO_CROSSOBJ_OPT]
     #define OPT_RELEASE_FLAGS /Qipo
     #define LDFLAGS_OPT_RELEASE /Qipo
  #endif

  // NODEFAULTLIB ensures static libs linked in will connect to the correct msvcrt, so no debug/release mixing occurs
  #define LDFLAGS_OPT_DEBUG /NODEFAULTLIB:MSVCRT.LIB
  #define LDFLAGS_OPT_QA /NODEFAULTLIB:MSVCRTD.LIB /OPT:REF
  #define LDFLAGS_OPT_RELEASE /NODEFAULTLIB:MSVCRTD.LIB /OPT:REF $[LDFLAGS_OPT4]

  #define OPTFLAGS /O3 /Qip

  // use "unsafe" QIfist flt->int rounding only if FAST_FLT_TO_INT is defined
  #define OPTFLAGS $[OPTFLAGS] $[if $[ne $[FAST_FLT_TO_INT],], /QIfist,]

  #define OPT_DEBUG_FLAGS /GZ /Od
  // We assume the Intel compiler installation dir is mounted as /ia32.
  #define EXTRA_LIBPATH /ia32/lib
  #define EXTRA_INCPATH /ia32/include

  #if $[or $[ne $[FORCE_INLINING],],$[eq $[OPTIMIZE],QA],$[eq $[OPTIMIZE],Release]]
      #define GLOBAL_EXTRA_CDEFS FORCE_INLINING $[GLOBAL_EXTRA_CDEFS]
  #endif

  // Note: all Opts will link w/debug info now
  #define LINKER_FLAGS /DEBUG /DEBUGTYPE:CV $[PROFILE_FLAG] /MAP $[MAPINFOFLAGS] /fixed:no /incremental:no

  // ensure pdbs are copied to install dir
  #define build_pdbs yes
#elif $[eq $[USE_COMPILER],BOUNDS]   // NuMega BoundsChecker
  #define COMPILER nmcl
  #define LINKER nmlink
  #define LIBBER lib
  #define COMMONFLAGS
  #define OPTFLAGS /O2 /Ogity /G6
  #define OPT_DEBUG_FLAGS /GZ
  #defer DEBUGPDBFLAGS /MDd /Zi $[BROWSEINFO_FLAGS] /Fd"$[osfilename $[patsubst %.obj,%.pdb,$[target]]]"
  #define RELEASEFLAGS /MD
  #define EXTRA_LIBPATH
  #define EXTRA_INCPATH
  #if $[BOUNDS_TRUETIME] // NuMega BoundsChecker TrueTime Profiler
    // This may or may not be correct, to extend the compiler and
    // linker with a switch, but I think it's the right thing to do
    // in this case.
    #define COMPILER $[COMPILER] /NMttOn
    #define LINKER $[LINKER] /NMttOn
  #endif
#elif $[eq $[USE_COMPILER],TRUETIME] // NuMega TrueTime Profiler
  // This may or may not be correct, to extend the compiler and
  // linker with a switch, but I think it's the right thing to do
  // in this case.
  #define COMPILER nmcl /NMttOn
  #define LINKER nmlink /NMttOn
  #define LIBBER lib
  #define COMMONFLAGS
  #define OPTFLAGS /O2 /Ogity /G6
  #define OPT_DEBUG_FLAGS /GZ
  #defer DEBUGPDBFLAGS /MDd /Zi $[BROWSEINFO_FLAG] /Fd"$[osfilename $[patsubst %.obj,%.pdb,$[target]]]"
  #define RELEASEFLAGS /MD
  #define EXTRA_LIBPATH
  #define EXTRA_INCPATH
#else
  #error Invalid value specified for USE_COMPILER.
#endif
